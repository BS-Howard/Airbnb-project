@using Airelax.Defines
@using Microsoft.Extensions.Options
@model Airelax.Application.ManageHouses.Response.ManageHouseDto
@inject IOptions<PhotoUploadSetting> _photoUploadSetting
@{
    Layout = "_Layout";
}

@section header{
    @await Html.PartialAsync("_MemberNavPartial")
}

<div class="main">
<div class="title-div row p-0 border-bottom-0">
    <h1 class="col-md-8">@Model.Title</h1>
    <div class="mix col-md-4 d-flex flex-wrap justify-content-md-end">
        <div class="sleep">
            <a href="#basic" id="changeStatus" class="barBtn p-0">
                @switch (Model.Status)
                {
                    case 1:
                        <img src="/icon/Published.svg">
                        <span>已發布</span>
                        break;
                    case 2:
                        <img src="/icon/UnPublished.svg">
                        <span>取消發布</span>
                        break;
                    default:
                        <img src="/icon/RemovePublish.svg">
                        <span>下架</span>
                        break;
                }
            </a>
            <a href="#policy" id="changeInstance" class="barBtn p-0">
                @if (Model.InstanceBooking)
                {
                    <span>即時預訂功能已開啟</span>
                }
                else
                {
                    <span>即時預訂功能已關閉</span>
                }
            </a>
        </div>
        <div class="view">
            <a href="/room/@Model.Id">預覽房源</a>
        </div>
    </div>
</div>
<div class="row border-bottom-0">
<div class="col-md-4 position-relative">
    <div class="bar-div d-md-none">
        <button class="barBtn" id="detailBtn">房源詳情</button>
        <button class="barBtn" id="priceBtn">價格和可訂狀態</button>
        <button class="barBtn" id="policyBtn">政策和規則</button>
    </div>
    <div class="d-none d-md-block sidebar">
        <ul class="ps-0">
            <li class="mb-1">
                <button class="btn barBtn sideBtn active my-2" data-bs-toggle="collapse" data-bs-target="#room-collapse" id="detailBtn">
                    房源詳情
                </button>
                <div class="collapse show collapsed" id="room-collapse">
                    <ul>
                        <li class="active">
                            <a href="#photo" class="link-dark">相片</a>
                        </li>
                        <li>
                            <a href="#basic" class="link-dark">房源基本資訊</a>
                        </li>
                        <li><a href="#facility" class="link-dark">設備與服務</a>
                        <li>
                        <li>
                            <a href="#position" class="link-dark">位置</a>
                        </li>
                        <li>
                            <a href="#hosuetype" class="link-dark">房源與房型</a>
                        </li>
                    </ul>
                </div>
            </li>
            <li class="mb-1">
                <button class="btn barBtn sideBtn my-2" data-bs-toggle="collapse" data-bs-target="#price-collapse" id="priceBtn">
                    價格和可訂狀態
                </button>
                <div class="collapse collapsed" id="price-collapse">
                    <ul>
                        <li class="active">
                            <a href="#price" class="link-dark">訂價</a>
                        </li>
                        <li>
                            <a href="#discount" class="link-dark">折扣</a>
                        </li>
                        <li>
                            <a href="#fee" class="link-dark">費用</a>
                        </li>
                    </ul>
                </div>
            </li>
            <li class="mb-1">
                <button class="btn barBtn sideBtn my-2" data-bs-toggle="collapse" data-bs-target="#policy-collapse" id="policyBtn">
                    政策和規則
                </button>
                <div class="collapse collapsed" id="policy-collapse">
                    <ul>
                        <li class="active">
                            <a href="#policy" class="link-dark">政策</a>
                        </li>
                        <li>
                            <a href="#rule" class="link-dark">《房屋守則》</a>
                        </li>
                    </ul>
                </div>
            </li>
        </ul>
    </div>
</div>
<div class="col-md-8">
<!-- 房源詳情 -->
<div class="detail-section">
    <!-- 相片 -->
    <div class="photo scroll" id="photo">
        <div class="up">
            <h2>相片</h2>
            <a href="#" class="editBtn photoBtn"
               data-bs-toggle="modal" data-bs-target="#photoModal">
                <span>(@Model.Pictures.Count()張照片)</span>編輯<img src="~/icon/next.svg">
            </a>
        </div>
        <div class="pic">
            <div class="showPic"></div>
        </div>
    </div>
    <!-- 房源基本資料 -->
    <div class="basic scroll" id="basic">
        <h2>房源基本資訊</h2>
        <div class="row title">
            <div class="col-10">
                <div class="subtitle">房源標題</div>
                <div class="content">@Model.Title</div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" num="50">編輯</button>
                <span class="d-none">房源標題應該要能展現房源的獨特之處。</span>
            </div>
        </div>
        <div class="row description">
            <div class="col-10">
                <div class="subtitle">房源描述</div>
                <div class="content">@Model.Description.HouseDescription</div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" textarea="true" description="true">編輯</button>
                <span class="d-none">讓房客感受入住你房源會有的感覺，包括對方會喜歡入住此空間的原因。</span>
            </div>
        </div>
        <div class="row person">
            <div class="col-8">
                <div class="subtitle">房客人數</div>
            </div>
            <div class="col-4 control">
                <button class="minus">-</button><span>@Model.CustomerNumber</span><button class="plus">+</button>
            </div>
        </div>
        <div class="row status">
            <div class="col-10">
                <div class="subtitle">房源狀態</div>
                <div class="content">
                    @switch (Model.Status)
                    {
                        case 1:
                            <div><img src="/icon/Published.svg"> 已發布</div>
                            break;
                        case 2:
                            <div><img src="/icon/UnPublished.svg"> 取消發布</div>
                            break;
                        default:
                            <div><img src="/icon/RemovePublish.svg"> 下架</div>
                            break;
                    }
                </div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" radio="true" data='status'>編輯</button>
                <span class="d-none">選擇房源目前狀態。</span>
            </div>
        </div>
    </div>
    <!-- 設備與服務 -->
    <div class="row facility mb-md-5 scroll" id="facility">
        <div class="col-10">
            <h2>設備與服務</h2>
            <div class="content" id="facilityContent">
                @foreach (var item in Model.ProvideFacilities)
                {
                    <span>@item,</span>
                }
            </div>
        </div>
        <div class="col-2">
            <a href="#" class="editBtn facilityBtn" data-bs-toggle="modal" data-bs-target="#facilityeModal">編輯<img src="~/icon/next.svg"></a>
        </div>
    </div>
    <!-- 位置 -->
    <div class="position scroll" id="position">
        <h2>位置</h2>
        <div class="row address">
            <div class="col-10">
                <div class="subtitle">地址</div>
                <div class="content">
                    <span>@Model.Address.Address,@Model.Address.Town,@Model.Address.City,@Model.Address.Country,@Model.Address.ZipCode</span>
                </div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" address="true">編輯</button>
                <span class="d-none">提供正確地址以方便租客查詢。</span>
            </div>
        </div>
        <div class="row block-description">
            <div class="col-10">
                <div class="subtitle">街區描述</div>
                <div class="content updateLocation">@Model.Address.LocationDescription</div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" textarea="true">編輯</button>
                <span class="d-none">分享街區的特點。</span>
            </div>
        </div>
        <div class="row traffic">
            <div class="col-10">
                <div class="subtitle">周邊交通</div>
                <div class="content updateLocation">@Model.Address.TrafficDescription</div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" textarea="true">編輯</button>
                <span class="d-none">讓房客知道在附近街區行動的方法，以及停車情況。</span>
            </div>
        </div>
    </div>
    <!-- 房源與房型 -->
    <div class="type scroll" id="hosuetype">
        <h2>房源與房型</h2>
        <div class="row category">
            <div class="col-10">
                <div class="subtitle">房源類型</div>
                <div class="content"></div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" select="true">編輯</button>
                <span class="d-none">選擇與你的房源最相似的住宿類型，讓房客的期望符合實際情況，並讓房源出現在正確的搜尋結果中。</span>
            </div>
        </div>
        <div class="row space">
            <div class="col-10">
                <div class="subtitle">房間與空間</div>
                <div class="content">未設定</div>
            </div>
            <div class="col-2">
                <a href="#" class="editBtn spaceBtn" data-bs-toggle="modal" data-bs-target="#spaceModal">編輯<img src="~/icon/next.svg"></a>
            </div>
        </div>
    </div>
</div>
<!-- 價格和可訂狀態 -->
<div class="price-section d-none">
    <!-- 訂價 -->
    <div class="price scroll" id="price">
        <h2>訂價</h2>
        <div class="row eachNight">
            <div class="col-10">
                <div class="subtitle">每晚價格</div>
                <div class="d-flex price-mix">
                    <span>基礎價格：$&ensp;</span>
                    <div class="content updatePrice">@Model.Origin</div>
                    <span>&ensp;TWD</span>
                </div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" price="true">編輯</button>
                <span class="d-none">你須要為房源設定價格。</span>
            </div>
        </div>
    </div>
    <!-- 折扣 -->
    <div class="discount scroll" id="discount">
        <h2>折扣</h2>
        <div class="row weekly">
            <div class="col-10">
                <div class="subtitle">週租折扣</div>
                <div class="d-flex price-mix">
                    <div class="content updatePrice">@Model.WeekDiscount</div>
                    <span>%</span>
                </div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" price="true" percent="true">編輯</button>
                <span class="d-none">7 晚以上的住宿將套用週租折扣。若你提供多種長租折扣，則會套用最長晚數的折扣。</span>
            </div>
        </div>
        <div class="row monthly">
            <div class="col-10">
                <div class="subtitle">月租折扣</div>
                <div class="d-flex price-mix">
                    <div class="content updatePrice">@Model.MonthDiscount</div>
                    <span>%</span>
                </div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" price="true" percent="true">編輯</button>
                <span class="d-none">7 28 晚以上的住宿將套用月租折扣。若你提供多種長租折扣，則會套用最長晚數的折扣。</span>
            </div>
        </div>
        <div class="row sweet">
            <div class="col-10">
                <div class="subtitle">甜甜價</div>
                <div class="d-flex price-mix">
                    <span>基礎價格：$&ensp;</span>
                    <div class="content updatePrice">@Model.SweetPrice</div>
                    <span>&ensp;TWD</span>
                </div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" price="true">編輯</button>
                <span class="d-none">此每晚價格會取代每週五和週六的基礎價格。若開啟智慧訂價功能，則不會套用此價格。</span>
            </div>
        </div>
    </div>
    <!-- 費用 -->
    <div class="fee scroll" id="fee">
        <h2>費用</h2>
        <div class="row clean">
            <div class="col-10">
                <div class="subtitle">清潔費</div>
                <div class="d-flex price-mix">
                    <span>$&ensp;</span>
                    <div class="content updatePrice">@Model.Fee</div>
                    <span>&ensp;TWD</span>
                </div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" price="true">編輯</button>
                <span class="d-none">此費用將適用於所有預訂。</span>
            </div>
        </div>
    </div>
</div>
<!-- 政策和規則 -->
<div class="policy-rule-section d-none">
    <!-- 政策 -->
    <div class="policy scroll" id="policy">
        <h2>政策</h2>
        <div class="row unbooking">
            <div class="col-10">
                <div class="subtitle">退訂政策</div>
                <div class="content">
                    @{
                        List<string> unBooking = new List<string> {"彈性", "彈性或不可退款", "中等", "中等或不可退", "稍嚴", "較嚴格或不可退款", "嚴格", "嚴格或不可退款"};
                        int index = 0;
                    }
                    @foreach (var item in unBooking)
                    {
                        if (index + 1 == Model.Cancel)
                        {
                            @item
                            ;
                            break;
                        }
                        index++;
                    }
                </div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" radio="true" data='unBooking'>編輯</button>
                <span class="d-none">選擇房客預訂房源的方式。</span>
            </div>
        </div>
        <div class="row instance">
            <div class="col-10">
                <div class="subtitle">即時預訂</div>
                <div class="content">
                    @if (Model.InstanceBooking)
                    {
                        <span>即時預訂功能已開啟</span>
                    }
                    else
                    {
                        <span>即時預訂功能已關閉</span>
                    }
                </div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" radio="true" data="instanceBooking">編輯</button>
                <span class="d-none">對於不到 28 晚的住宿，你可以選擇要提供房客哪些退訂選項。 至於 28 晚以上的住宿，房客預訂的房源一律適用長期住宿退訂政策。 </span>
            </div>
        </div>
        <div class="row check-in">
            <div class="col-10">
                <div class="subtitle">入住時段</div>
                <div class="content updateCheckTime">@Model.CheckinTime</div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" time="true" checkin="true">編輯</button>
                <span class="d-none">請自行決定租客的入住時間。</span>
            </div>
        </div>
        <div class="row check-out">
            <div class="col-10">
                <div class="subtitle">退房時間</div>
                <div class="content updateCheckTime">@Model.CheckoutTime</div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" time="true">編輯</button>
                <span class="d-none">請自行決定租客的退房時間。</span>
            </div>
        </div>
        <div class="row deposit">
            <div class="col-10">
                <div class="subtitle">押金</div>
                <div class="d-flex price-mix">
                    <span>$&ensp;</span>
                    <div class="content updatePrice">@Model.CashPledge</div>
                    <span>&ensp;TWD</span>
                </div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" price="true">編輯</button>
                <span class="d-none">如果你在房客退房後 14 天內提出損壞賠償申請，房客將承擔損壞賠償責任，上限為此金額。</span>
            </div>
        </div>
    </div>
    <!-- 房屋守則 -->
    <div class="rule scroll" id="rule">
        <h2>《房屋守則》</h2>
        <div class="explain">房客在預訂之前必須同意你的《房屋守則》。</div>
        <div class="row children">
            <div class="col-8">
                <div class="subtitle">適合兒童（2-12 歲）</div>
                <div class="explain">如果房源內的物品設施可能會對兒童造成傷害，你可以讓房客知道此房源不適合兒童入住。房客仍然可以聯絡你來了解詳情。</div>
            </div>
            <div class="col-4">
                <div class="btn-group btn-group-justified">
                    <input type="radio" class="btn-check updateAllow" value="0" name="children" id="noChildren" autocomplete="off" @(Html.Raw(Model.HouseRule.AllowChild == false ? "checked=\"checked\"" : ""))>
                    <label class="btn btn-outline-dark editBtn " for="noChildren">✕</label>
                    <input type="radio" class="btn-check updateAllow" value="1" name="children" id="yesChildren" autocomplete="off" @(Html.Raw(Model.HouseRule.AllowChild == true ? "checked=\"checked\"" : ""))>
                    <label class="btn btn-outline-dark editBtn ms-2" for="yesChildren">✓</label>
                </div>
            </div>
        </div>
        <div class="row infant">
            <div class="col-8">
                <div class="subtitle">適合嬰幼兒（2 歲以下）</div>
                <div class="explain">如果房源內的物品設施可能會對嬰幼兒造成傷害，你可以讓房客知道此房源不適合嬰幼兒入住。房客仍然可以聯絡你來了解詳情。</div>
            </div>
            <div class="col-4">
                <div class="btn-group btn-group-justified">
                    <input type="radio" class="btn-check updateAllow" value="0" name="infant" id="noInfant" autocomplete="off" @(Html.Raw(Model.HouseRule.AllowBaby == false ? "checked=\"checked\"" : ""))>
                    <label class="btn btn-outline-dark editBtn " for="noInfant">✕</label>
                    <input type="radio" class="btn-check updateAllow" value="1" name="infant" id="yesInfant" autocomplete="off" @(Html.Raw(Model.HouseRule.AllowBaby == true ? "checked=\"checked\"" : ""))>
                    <label class="btn btn-outline-dark editBtn ms-2" for="yesInfant">✓</label>
                </div>
            </div>
        </div>
        <div class="row pet">
            <div class="col-8">
                <div class="subtitle">可攜帶寵物</div>
                <div class="subtitle-explain">你可以限制房客攜帶寵物，但在合理情況下，仍須接受可能攜帶輔助性動物的房客。</div>
            </div>
            <div class="col-4">
                <div class="btn-group btn-group-justified">
                    <input type="radio" class="btn-check updateAllow" value="0" name="pet" id="noPet" autocomplete="off" @(Html.Raw(Model.HouseRule.AllowPet == false ? "checked=\"checked\"" : ""))>
                    <label class="btn btn-outline-dark editBtn " for="noPet">✕</label>
                    <input type="radio" class="btn-check updateAllow" value="1" name="pet" id="yesPet" autocomplete="off" @(Html.Raw(Model.HouseRule.AllowPet == true ? "checked=\"checked\"" : ""))>
                    <label class="btn btn-outline-dark editBtn ms-2" for="yesPet">✓</label>
                </div>
            </div>
        </div>
        <div class="row smoke">
            <div class="col-8">
                <div class="subtitle">允許吸煙</div>
            </div>
            <div class="col-4">
                <div class="btn-group btn-group-justified">
                    <input type="radio" class="btn-check updateAllow" value="0" name="smoke" id="noSmoke" autocomplete="off" @(Html.Raw(Model.HouseRule.AllowSmoke == false ? "checked=\"checked\"" : ""))>
                    <label class="btn btn-outline-dark editBtn " for="noSmoke">✕</label>
                    <input type="radio" class="btn-check updateAllow" value="1" name="smoke" id="yesSmoke" autocomplete="off" @(Html.Raw(Model.HouseRule.AllowSmoke == true ? "checked=\"checked\"" : ""))>
                    <label class="btn btn-outline-dark editBtn ms-2" for="yesSmoke">✓</label>
                </div>
            </div>
        </div>
        <div class="row event">
            <div class="col-8">
                <div class="subtitle">允許舉辦活動</div>
            </div>
            <div class="col-4">
                <div class="btn-group btn-group-justified">
                    <input type="radio" class="btn-check updateAllow" value="0" name="event" id="noEvent" autocomplete="off" @(Html.Raw(Model.HouseRule.AllowParty == false ? "checked=\"checked\"" : ""))>
                    <label class="btn btn-outline-dark editBtn" for="noEvent">✕</label>
                    <input type="radio" class="btn-check updateAllow" value="1" name="event" id="yesEvent" autocomplete="off" @(Html.Raw(Model.HouseRule.AllowParty == true ? "checked=\"checked\"" : ""))>
                    <label class="btn btn-outline-dark editBtn ms-2" for="yesEvent">✓</label>
                </div>
            </div>
        </div>
        <div class="row others">
            <div class="col-10">
                <div class="subtitle">其他守則</div>
                <div class="content">@Model.HouseRule.Other</div>
            </div>
            <div class="col-2">
                <button class="editBtn commonBtn" data-bs-toggle="collapse" href="#commonCollapse" textarea="true">編輯</button>
                <span class="d-none">你可以加入安全相關要求、共用空間守則、社區規定等內容。</span>
            </div>
        </div>
    </div>
</div>
</div>
</div>
</div>
<!-- 共用組件 -->
<template id="common-component">
    <style>
        .btn {
            background-color: #fff;
            border: none;
        }

        .container {
            margin-top: 1rem;
            border: 1px solid #717171;
            border-radius: 18px;
        }

        .up {
            padding: 1.5rem;
        }

        .top {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

            .top h4 {
                margin: 0;
                font-size: 1.2rem;
            }

            .top button {
                font-size: 1.1rem;
            }

        span {
            font-size: 0.8rem;
            color: #717171;
        }

        .com-description {
            display: block;
            width: 95%;
        }

        .com-input {
            margin-top: 1.5rem;
        }

            .select select,
            .address input,
            .description textarea,
            .com-input .time,
            .com-input textarea,
            .com-input input {
                font-size: 1.2rem;
                padding: 0.7rem 0.2rem;
                width: 95%;
                border-radius: 8px;
                border: 1px solid #717171;
                outline: none;
            }

                .com-input input.limit {
                    border: 3px solid red;
                }

            .com-input p {
                margin: 0;
                margin-top: 0.2rem;
                color: #717171;
            }

        .save {
            width: 100%;
            height: 3.5rem;
            border-top: 1px solid #717171;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .cancel {
            cursor: pointer;
        }

        .save .cancel {
            text-decoration: underline;
            font-size: 1rem;
            margin-left: 1.5rem;
        }

        .save .saveBtn {
            color: #fff;
            background-color: #000;
            padding: .5rem .8rem;
            font-size: 1rem;
            border-radius: 8px;
            margin-right: 2rem;
            cursor: pointer;
        }

            .save .saveBtn.disabled {
                background-color: rgba(0, 0, 0, 0.459);
                color: #fff;
            }

        .com-price {
            display: flex;
            align-items: center;
        }

            .com-price span,
            .com-price p {
                font-size: 1.5rem;
                margin-right: 0.5rem;
                display: none;
            }

            .com-price span {
                margin-left: 0.5rem;
            }

        .list {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            cursor: pointer;
        }

            .list input {
                margin: 0;
                margin-top: 0.3rem;
                width: 10%;
                cursor: pointer;
            }

            .list label {
                width: 100%;
                cursor: pointer;
            }

                .list label img {
                    width: .7rem;
                    margin-right: 0.2rem;
                }

            .list span {
                font-size: 1rem;
                color: #000;
                font-weight: 700;
                cursor: pointer;
            }

            .list p {
                font-size: .9rem;
                cursor: pointer;
            }

        .com-input .radio,
        .com-input .time,
        .com-input textarea {
            display: none;
        }

        .description {
            display: flex;
            flex-direction: column;
        }

            .description textarea {
                height: 150px;
            }

            .description h4 {
                margin-bottom: 0.3rem;
                padding-top: 1rem;
                font-size: 1.2rem;
                font-weight: 700;
                border-top: 1px solid #717171;
            }

            .description span {
                margin-bottom: 1rem;
            }

        .select,
        .address {
            display: flex;
            flex-direction: column;
            margin-bottom: 1.2rem;
        }

            .select span,
            .address span {
                font-size: 1rem;
                margin-bottom: 0.3rem;
                font-weight: 700;
            }
            
            
            
    </style>
    <div>
        <div class="container">
            <div class="up">
                <div class="top">
                    <h4 class="com-title"></h4>
                    <button class="btn cancel">✕</button>
                </div>
                <span class="com-description"></span>
                <div class="com-input">
                    <div class="com-price">
                        <p>$</p><input type="text"><span>%</span>
                    </div>
                    <p class="com-length"><span class="start">0</span>/<span class="end"></span></p>
                    <textarea style="height: 150px"></textarea>
                    <input type="time" class="time">
                    <div class="radio"></div>
                </div>
            </div>
            <div class="save">
                <button class="btn cancel">取消</button>
                <button class="btn saveBtn" type="button">儲存</button>
            </div>
        </div>
    </div>
</template>

<!-- 設備與服務的modal -->
<div class="modal fade" id="facilityeModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="facilityLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-fullscreen-md-down modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bolder" id="facilityLabel">設備與服務</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="facilityBody"></div>
            <div class="modal-footer d-flex justify-content-between">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-dark" id="facility-save" data-bs-dismiss="modal">儲存</button>
            </div>
        </div>
    </div>
</div>

<!-- 房間與空間的modal -->
<div class="modal fade" id="spaceModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="spaceLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-fullscreen-md-down modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bolder" id="spaceLabel">房間和空間</h5>
                <button type="button" id="space-close" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="spaceBody"></div>
        </div>
    </div>
</div>

<!-- 相片的modal -->
<div class="modal fade" id="photoModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="photoLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-fullscreen-md-down modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bolder" id="photoLabel">相片</h5>
            </div>
            <div class="modal-body" id="photoBody">
                <div class="upload">
                    <h2>所有相片</h2>
                    <span>拖放相片即可更改順序。</span>
                    <label class="btn border-dark fw-bolder">
                        <input id="upload_img" style="display:none;" type="file">上傳相片
                    </label>
                    <div id="showPhoto" class="drag-sort-enable"></div>
                    <label id="uploadDiv" for="upload_img">
                        <img src="~/icon/upload.svg">
                        <p>新增更多</p>
                    </label>
                </div>
            </div>
            <div class="modal-footer d-flex justify-content-between">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-dark" id="photo-save" data-bs-dismiss="modal">儲存</button>
            </div>
        </div>
    </div>
</div>

<template id="loading">
    <div class="lds-spinner d-block">
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
    </div>
</template>

@section ManageJS {
    <script>
        let barBtn = document.querySelectorAll('.barBtn');
        let detailSection = document.querySelector('.detail-section');
        let priceSection = document.querySelector('.price-section');
        let policySection = document.querySelector('.policy-rule-section');
        let contentDiv = document.querySelectorAll('.content');
        const loading = document.querySelector('#loading');
        //BasicData
        let instanceBooking = [
            { name: "instance", title: "即時預訂功能已開啟", detail: "符合所有條件的房客可以即時預訂房源，其他房客則須傳送預訂申請。若你對預訂有任何疑慮，可取消且免受處罰。" },
            { name: "instance", title: "即時預訂功能已關閉", detail: "所有房客都必須傳送預訂申請" }
        ];
        let unBooking = [
            { name: "unBooking", title: "彈性", detail: "在入住日1天前取消預訂，可獲得全額退款" },
            { name: "unBooking", title: "彈性或不可退款", detail: "除了彈性退訂政策外，您還可以提供不可退款選項：房客雖然會少付10%的費用，不過無論何時對方取消預訂，您都能保留全數收款。" },
            { name: "unBooking", title: "中等", detail: "在入住日5天前取消預訂，可獲得全額退款" },
            { name: "unBooking", title: "中等或不可退款", detail: "除了中等退訂政策外，您還可以提供不可退款選項：房客雖然會少付10%的費用，不過無論何時對方取消預訂，您都能保留全數收款。" },
            { name: "unBooking", title: "稍嚴", detail: "最晚在入住前 30 天取消可拿回全額退款。如果在入住前 30 天預訂，並在預訂後 48 小時內且入住前至少 14 天取消，即可拿回全額退款。在此之後，最晚在入住前 7 天取消可拿回 50% 退款。在這之後取消則不予退款。" },
            { name: "unBooking", title: "較嚴格或不可退款", detail: "除了《較嚴格退訂政策》外，你也可以提供不可退款選項：房客雖然會少付 10% 費用，但若取消預訂，你就能保留全數收款。" },
            { name: "unBooking", title: "嚴格", detail: "針對14天之後的預訂，若房客在預訂後48小時內取消，可以獲得全額退款。提早入住日期7天前取消預訂，可獲得50%退款。旅程開始前7天內取消，則無法退款。" },
            { name: "unBooking", title: "嚴格或不可退款", detail: "除了嚴格退訂政策外，您還可以提供不可退款選項：房客雖然會少付10%的費用，不過萬一對方取消預訂，您就能保留全數收款。" },
        ];
        let status = [
            { name: "status", title: "已發布", detail: "房客可以在搜尋結果中找到你的房源，且可以提出預訂申請或預訂日曆上開放的日期。", icon: '<img src="/icon/Published.svg">' },
            { name: "status", title: "取消發布", detail: "房客無法預訂或在搜尋結果中找到此房源。", icon: '<img src="/icon/UnPublished.svg">' },
            { name: "status", title: "下架", detail: "將你的房源從 Airelax 永久下架。", icon: '<img src="/icon/RemovePublish.svg">' },
        ];
        let description = [
            { title: "房源空間", detail: "提供房源與房型的概述，讓房客對房源有初步的了解。" },
            { title: "房客使用權限", detail: "讓房客知道在附近街區行動的方法，以及停車情況。" },
            { title: "其他注意事項", detail: "提供沒有在其他部分列明，而你希望潛在房客在預訂前知道的特殊事項。" }
        ];
        let address = ["街道", "公寓、套房門牌號碼（選填）", "城市", "州", "郵遞區號"];
        let typeSelect = [
            {
                title: "哪個類型與您的房源最相符？",
                category: ["公寓", "獨棟房屋", "附屬建築", "獨特房源", "家庭式旅館", "精品旅館"]
            },
            {
                title: "住宿類型",
                houseType: [
                    ["出租大樓", "私有公寓", "loft", "服務式公寓", "古巴家庭旅館"],
                    ["住宅", "小木屋", "別墅", "連棟房屋", "村舍", "生態土屋", "船屋", "小屋", "農場住宿", "度假小木屋", "平房"],
                    ["客用住房", "客用套房", "農場住宿"],
                    ["穀倉", "小船", "公車", "露營車", "樹屋", "營地", "沙堡", "洞穴", "冰屋", "小島", "牧場", "宗教建築", "貨櫃屋", "帳篷", "火車", "蒙古包", "其他"],
                    ["家庭式旅館", "自然小屋", "農場住宿", "臺灣民宿", "日式旅館"],
                    ["飯店", "青年旅館", "渡假村", "自然小屋", "精品旅店", "公寓式旅店", "服務式公寓", "文化遺產旅店", "客棧"]
                ]
            },
            {
                title: "房源類型",
                roomCategory: ["整套房源", "獨立房間", "合住房間"]
            }
        ];
        let facility = {
            "衛浴": ["浴缸", "坐浴盆", "沐浴乳", "清潔產品", "潤髮乳", "吹風機", "熱水", "戶外淋浴空間", "洗髮露"],
            "臥室和洗衣": ["生活必需品", "床單", "衣櫥", "乾衣機", "曬衣架", "額外的枕頭和毛毯", "衣架", "熨斗", "蚊帳", "遮光窗簾", "洗衣機"],
            "娛樂": ["書籍與讀物", "網路連線", "運動器材", "遊戲主機", "鋼琴", "乒乓球桌", "撞球桌", "黑膠唱片機", "音響系統", "電視"],
            "親子": ["嬰兒浴盆", "嬰兒監視器", "嬰兒安全門欄", "臨時保母推薦", "桌遊", "尿布台", "童書與玩具", "兒童餐具", "嬰兒床", "壁爐護欄", "兒童高腳椅", "插座蓋", "遊戲床/旅行用嬰兒床", "桌角防護", "窗栅"],
            "暖氣和冷氣": ["空調設備", "吊扇", "暖氣", "室內壁爐", "移動式電扇"],
            "居家安全": ["一氧化碳警報器", "滅火器", "急救包", "帶鎖的臥室", "煙霧警報器"],
            "網路和辦公": ["專門工作空間", "隨身WiFi", "無線網路"],
            "廚房和餐飲": ["烤盤", "燒烤用具", "麵包機", "調理機", "咖啡", "咖啡機", "基本廚具", "餐桌", "盤子和餐具", "洗碗機", "冷凍庫", "熱水壺", "廚房", "微波爐", "小冰箱", "烤箱", "冰箱", "電鍋", "爐子", "烤麵包機", "壓縮式垃圾桶", "葡萄酒杯"],
            "位置特色": ["直達海灘", "湖畔", "附近有自助洗衣店", "獨立入口", "度假村入場證", "無須搭乘交通工具即可前往滑雪場", "水岸"],
            "戶外": ["後院", "烤肉區", "沙灘必備物品", "自行車", "船舷梯", "火坑", "吊床", "小輕艇", "戶外用餐區", "戶外家具", "戶外廚房", "庭院或陽台"],
            "停車位和設施": ["電梯", "電動汽車（EV）充電設備", "建築物內免費停車", "路邊有免費停車位", "健身房", "按摩浴池", "建築物範圍外有收費停車", "建築物內有收費停車位", "游泳池", "獨立客廳", "三溫暖", "獨立房屋"],
            "服務": ["早餐", "退房前需打掃", "可長期住宿", "可存放行李"]
        };
        let space = {
            canUse: {
                title: "房客可以使用哪些區域？",
                detail: ["臥室", "全套衛浴", "廁所", "全套廚房", "小廚房", "客廳", "用餐區域", "辦公室", "後院", "庭院", "游泳池", "按摩浴池", "洗衣間", "車庫", "健身房", "室外空間"]
            },
            bedroom: {
                title: "臥室",
                check: ["與其他房客共用", "附設獨立衛浴"],
                detail: ["小號雙人床", "標準雙人床", "傳統單人床", "沙發床", "加大雙人床", "標準單人床", "小型沙發床", "雙層床", "地板床墊", "充氣床墊", "嬰兒床", "幼兒床", "吊床", "水床"]
            },
            share: {
                title: "會和房東共用這些空間？",
                check: ["會，房客會與房東共用空間", "不會，房客可享有單獨的空間"]
            }
        };
        //UpdateInput
        let updateDescription = {
            Description: "",
            SpaceDescription: "",
            GuestPermission: "",
            Others: "",
        };
        let updateAddress = {
            Address: "",
            Town: "",
            City: "",
            Country: "",
            ZipCode: ""
        };
        let updateCategory = {
            Category: 0,
            HouseType: 0,
            RoomCategory: 0
        };
        let updateTitle = { Title: "" };
        let updateStatus = { Status: 0 };
        let updateLocation = {
            LocationDescription: "",
            TrafficDescription: ""
        };
        let updatePrice = {
            Origin: 0,
            WeekDiscount: 0,
            MonthDiscount: 0,
            SweetPrice: 0,
            CleanFee: 0,
            CashPledge: 0
        };
        let updateCancel = {
            CancelPolicy: 0
        };
        let updateRealTime = {
            CanRealTime: false
        };
        let updateCheckTime = {
            CheckinTime: "",
            CheckoutTime: "",
        };
        let updateOthers = {
            Other: ""
        };
        //FirstTime
        let firstTime = true;
        let AddressFirstTime = true;
        let CategoryFirstTime = true;

        let lastBar = '';
        barBtn.forEach(item => {
            // 初始化
            if (lastBar == '') {
                lastBar = detailSection;
                document.getElementById('detailBtn').classList.add('active');
            }
            item.addEventListener('click', (e) => {
                barBtn.forEach(btn => btn.classList.remove('active'))
                lastBar.classList.add('d-none');
                if (e.target.getAttribute('id') === 'detailBtn' || e.target.getAttribute('id') === 'changeStatus') {
                    detailSection.classList.remove('d-none');
                    document.querySelector('#detailBtn').classList.add('active');
                    lastBar = detailSection;
                }
                else if (e.target.getAttribute('id') === 'priceBtn') {
                    priceSection.classList.remove('d-none');
                    e.target.classList.add('active');
                    lastBar = priceSection;
                }
                else {
                    policySection.classList.remove('d-none');
                    document.querySelector('#policyBtn').classList.add('active');
                    lastBar = policySection;
                }
            });
        });

        let activeContent;
        let commonBtn = document.querySelectorAll('.commonBtn');
        commonBtn.forEach(btn => {
            btn.addEventListener('mousedown', function (e) {
                let limitNumber = 0;
                let component = document.createElement('common-component');
                let input = component.shadowRoot.querySelector('input');
                let textarea = component.shadowRoot.querySelector('textarea');
                let content = getParentNode(this, 2).querySelector('.content');
                let saveBtn = component.shadowRoot.querySelector('.saveBtn');
                let inputTime = component.shadowRoot.querySelector('input[type="time"]');
                let radio = component.shadowRoot.querySelector('.radio');
                let up = component.shadowRoot.querySelector('.up');

                //避免重複出現一樣的模組
                let allComponent = getParentNode(this, 2).querySelectorAll('common-component');
                if (allComponent !== undefined) {
                    allComponent.forEach(x => { x.parentNode.removeChild(x) });
                }

                //按編輯時隱藏內容
                activeContent = content;

                component.classList.add('collapse');
                component.setAttribute('id', 'commonCollapse');
                component.shadowRoot.querySelector('.com-title').innerText = getParentNode(this, 2).querySelector('.subtitle').innerText;
                component.shadowRoot.querySelector('span').innerText = this.parentNode.querySelector('span').innerText;

                //是否啟用Textarea
                if (this.getAttribute('textarea') !== null) {
                    textarea.style.display = 'block';
                    input.style.display = 'none';
                }

                //是否啟用Time
                if (this.getAttribute('time') !== null) {
                    inputTime.style.display = 'block';
                    input.style.display = 'none';
                }

                //是否啟用Radio & 動態生成資料
                if (this.getAttribute('radio') !== null) {
                    radio.style.display = 'block';
                    input.style.display = 'none';
                    let data = [];
                    if (e.target.getAttribute('data') === 'instanceBooking') data = instanceBooking;
                    else if (e.target.getAttribute('data') === 'unBooking') data = unBooking;
                    else if (e.target.getAttribute('data') === 'status') data = status;


                    data.forEach((item, index) => {
                        let list = document.createElement('div').cloneNode(true);
                        let input = document.createElement('input');
                        let label = document.createElement('label');
                        let span = document.createElement('span');
                        let iconSpan = document.createElement('div');
                        let p = document.createElement('p');
                        list.classList.add('list');
                        input.setAttribute('type', 'radio');
                        input.setAttribute('id', `${item.name}${index}`);
                        input.setAttribute('name', `${item.name}`);
                        label.setAttribute('for', `${item.name}${index}`);
                        span.innerText = item.title;
                        p.innerText = item.detail;

                        if (e.target.getAttribute('data') === 'status') {
                            iconSpan.innerHTML += item.icon;
                            if ('@Html.Raw(Model.Status)' == (index + 1)) {
                                input.checked = true;
                            }
                        }

                        if (e.target.getAttribute('data') === 'unBooking') {
                            if ('@Html.Raw(Model.Cancel)' == (index + 1)) {
                                input.checked = true;
                            }
                        }

                        if (e.target.getAttribute('data') === 'instanceBooking') {
                            if ('@Html.Raw(Model.InstanceBooking)' == 'True' && index == 0) {
                                input.checked = true;
                            }
                            else if ('@Html.Raw(Model.InstanceBooking)' == 'False' && index == 1) {
                                input.checked = true;
                            }
                        }

                        iconSpan.appendChild(span);
                        label.appendChild(iconSpan);
                        label.appendChild(p);
                        list.appendChild(input);
                        list.appendChild(label);
                        component.shadowRoot.querySelector('.radio').appendChild(list);
                    });
                    //初始化radio
                    component.shadowRoot.querySelectorAll('.radio span').forEach(x => {
                        if (x.innerText == getParentNode(e.target, 2).querySelector('.content').innerText) {
                            getParentNode(x, 3).querySelector('input').checked = true
                        }
                    });
                }

                //房間詳情
                if (this.getAttribute('description') !== null) {
                    description.forEach((item, i) => {
                        let div = document.createElement('div');
                        let textbox = document.createElement('textarea');
                        let h4 = document.createElement('h4');
                        let span = document.createElement('span');
                        div.classList.add('description');
                        h4.innerText = item.title;
                        span.classList.add('com-description');
                        span.innerText = item.detail;
                        if (i == 0) {
                            if (firstTime) textbox.value = '@Html.Raw(Model.Description.SpaceDescription)';
                            else textbox.value = updateDescription.SpaceDescription;
                        }
                        if (i == 1) {
                            if (firstTime) textbox.value = '@Html.Raw(Model.Description.GuestPermission)';
                            else textbox.value = updateDescription.GuestPermission;
                        }
                        if (i == 2) {
                            if (firstTime) textbox.value = '@Html.Raw(Model.Description.Others)';
                            else textbox.value = updateDescription.Others;
                        }

                        div.appendChild(h4);
                        div.appendChild(span);
                        div.appendChild(textbox);
                        component.shadowRoot.querySelector('.up').appendChild(div);
                    })
                }

                //地址
                if (this.getAttribute('address') !== null) {
                    input.style.display = 'none';
                    address.forEach((item, index) => {
                        let div = document.createElement('div');
                        let input = document.createElement('input');
                        let span = document.createElement('span');
                        div.classList.add('address');
                        span.innerText = item;
                        switch (index) {
                            case 0:
                                if (AddressFirstTime) input.value = '@Html.Raw(Model.Address.Address)';
                                else input.value = updateAddress.Address;
                                break;
                            case 1:
                                if (AddressFirstTime) input.value = '@Html.Raw(Model.Address.Town)';
                                else input.value = updateAddress.Town;
                                break;
                            case 2:
                                if (AddressFirstTime) input.value = '@Html.Raw(Model.Address.City)';
                                else input.value = updateAddress.City;
                                break;
                            case 3:
                                if (AddressFirstTime) input.value = '@Html.Raw(Model.Address.Country)';
                                else input.value = updateAddress.Country;
                                break;
                            default:
                                if (AddressFirstTime) input.value = '@Html.Raw(Model.Address.ZipCode)';
                                else input.value = updateAddress.ZipCode;
                        }

                        div.appendChild(span);
                        div.appendChild(input);
                        component.shadowRoot.querySelector('.up').appendChild(div);
                    })
                }

                //房源類型
                if (this.getAttribute('select') !== null) {
                    input.style.display = 'none';
                    let temp;
                    typeSelect.forEach((item, i) => {
                        let div = document.createElement('div');
                        let select = document.createElement('select');
                        let span = document.createElement('span');
                        div.classList.add('select');
                        span.innerText = item.title;

                        //初始化
                        if (i == 0) {
                            typeSelect[i].category.forEach((x, i) => {
                                let option = document.createElement('option').cloneNode(true);
                                option.innerText = x;
                                option.value = i + 1;
                                select.appendChild(option);
                            });
                            select.value = updateCategory.Category != 0 ? Number(updateCategory.Category) : Number('@Html.Raw(Model.HouseCategory.Category)');
                            temp = select.value;
                        }
                        if (i == 1) {
                            typeSelect[i].houseType[temp - 1].forEach((x, i) => {
                                let option = document.createElement('option').cloneNode(true);
                                option.innerText = x;
                                option.value = Number(`${temp}${(i + 1).toString().padStart(2, "0")}`)
                                select.appendChild(option);
                            });
                            select.classList.add('second');
                            select.value = updateCategory.HouseType != 0 ? Number(updateCategory.HouseType) : Number('@Html.Raw(Model.HouseCategory.HouseType)');

                        }
                        if (i == 2) {
                            typeSelect[i].roomCategory.forEach((x, i) => {
                                let option = document.createElement('option').cloneNode(true);
                                option.innerText = x;
                                option.value = i + 1;
                                select.appendChild(option);
                            });
                            select.value = updateCategory.RoomCategory != 0 ? Number(updateCategory.RoomCategory) : Number('@Html.Raw(Model.HouseCategory.RoomCategory)');
                        }

                        div.appendChild(span);
                        div.appendChild(select);
                        component.shadowRoot.querySelector('.up').appendChild(div);
                    });

                    component.shadowRoot.querySelector('select').addEventListener('change', (e) => {
                        let second = component.shadowRoot.querySelector('.second');
                        second.innerHTML = "";
                        typeSelect[1].houseType[e.target.value - 1].forEach((x, i) => {
                            let option = document.createElement('option').cloneNode(true);
                            option.innerText = x;
                            option.value = Number(`${e.target.value}${(i + 1).toString().padStart(2, "0")}`)
                            second.appendChild(option);
                        });
                    });
                }

                //price區域
                if (this.getAttribute('price') !== null) {
                    if (this.getAttribute('percent') !== null) {
                        component.shadowRoot.querySelector('.com-price span').style.display = 'block';
                    }
                    else {
                        component.shadowRoot.querySelector('.com-price p').style.display = 'block';
                    }
                    activeContent.parentNode.style.opacity = '0';
                }

                //Time區域
                if (this.getAttribute('time') !== null) {
                    if (this.getAttribute('checkin') !== null) inputTime.value = '@Html.Raw(@Model.CheckinTime)';
                    else inputTime.value = '@Html.Raw(@Model.CheckoutTime)';
                }

                //Time & textarea初始值
                if (content.innerText === "未設定" || content.innerText === "選擇時間" || content.innerText == null) {
                    input.value = '';
                    textarea.value = '';
                    inputTime.value = '';
                }
                else {
                    input.value = content.innerText;
                    textarea.value = content.innerText;
                    inputTime.value = content.innerText;
                }

                //字數限制
                if (this.getAttribute('num') !== null)
                    limitNumber = Number(this.getAttribute('num'));
                else
                    component.shadowRoot.querySelector('.com-length').style.display = 'none';
                component.shadowRoot.querySelector('.start').innerText = input.value.length;
                component.shadowRoot.querySelector('.end').innerText = limitNumber;

                input.addEventListener('input', function () {
                    component.shadowRoot.querySelector('.start').innerText = this.value.length;
                    //price只能輸入數字
                    if (e.target.getAttribute('price') !== null) {
                        this.value = this.value.replace(/\D/g, '');
                        if (e.target.getAttribute('percent') !== null) {
                            if (Number(this.value) > 100 || Number(this.value) < 0) saveBtn.style.display = 'none';
                            else saveBtn.style.display = 'block';
                        }
                    }

                    if (this.value.length > limitNumber && limitNumber !== 0) {
                        input.classList.add('limit');
                        saveBtn.classList.add('disabled');
                        saveBtn.disabled = true;
                    }
                    else {
                        input.classList.remove('limit');
                        saveBtn.classList.remove('disabled');
                        saveBtn.disabled = false;
                    }
                });

                //儲存Model
                saveBtn.addEventListener('click', (event) => {
                    content.innerText = "";
                    if (e.target.getAttribute('textarea') !== null) {
                        content.innerText = textarea.value;
                        switch (getParentNode(e.target, 2).querySelector('.subtitle').innerText) {
                            case '房源描述':
                                updateDescription.Description = textarea.value;
                                component.shadowRoot.querySelectorAll('.description textarea').forEach((x, i) => {
                                    if (i == 0) updateDescription.SpaceDescription = x.value;
                                    if (i == 1) updateDescription.GuestPermission = x.value;
                                    if (i == 2) updateDescription.Others = x.value;
                                });
                                PostData(updateDescription, "Description", "Put");
                                firstTime = false;
                                break;
                            case '其他守則':
                                updateOthers.Other = textarea.value;
                                PostData(updateOthers, "Others", "Put");
                                break;
                            //街區描述 & 周邊交通
                            default :
                                document.querySelectorAll('.updateLocation').forEach((x, i) => {
                                    Object.keys(updateLocation).forEach((item, index) => {
                                        if (index == i) updateLocation[item] = x.innerText
                                    });
                                });
                                PostData(updateLocation, "Location", "Put");
                                break;
                        }
                    }
                    else if (e.target.getAttribute('time') !== null) {
                        content.innerText = inputTime.value;
                        document.querySelectorAll('.updateCheckTime').forEach((x, i) => {
                            Object.keys(updateCheckTime).forEach((item, index) => {
                                if (index == i) updateCheckTime[item] = x.innerText;
                            });
                        });
                        PostData(updateCheckTime, "CheckTime", "Put");
                    }
                    else if (e.target.getAttribute('radio') !== null) {
                        radio.querySelectorAll('input').forEach((x, index) => {
                            if (x.checked) {
                                content.innerHTML = x.nextSibling.querySelector('div').innerHTML;
                                switch (getParentNode(e.target, 2).querySelector('.subtitle').innerText) {
                                    case '房源狀態':
                                        updateStatus.Status = (index + 1);
                                        PostData(updateStatus, "Status", "Put");
                                        document.getElementById('changeStatus').innerHTML = content.innerHTML;
                                        break;
                                    case '退訂政策':
                                        updateCancel.CancelPolicy = (index + 1);
                                        PostData(updateCancel, "Cancel", "Put");
                                        break;
                                    case '即時預訂':
                                        if (index == 0) updateRealTime.CanRealTime = true;
                                        else updateRealTime.CanRealTime = false;
                                        PostData(updateRealTime, "RealTime", "Put");
                                        document.querySelector('#changeInstance').innerHTML = content.innerHTML;
                                        break;
                                }
                            }
                        });
                    }
                    else if (e.target.getAttribute('address') !== null) {
                        AddressFirstTime = false;
                        up.querySelectorAll('.address input').forEach((x, i) => {
                            if (x.value !== "")
                                content.innerText += `${x.value},`;
                            Object.keys(updateAddress).forEach((item, index) => {
                                if (i == index) updateAddress[item] = x.value;
                            });
                        });
                        PostData(updateAddress, "Address", "Put");
                    }
                    else if (e.target.getAttribute('select') !== null) {
                        up.querySelectorAll('select').forEach((x, i) => {
                            Object.keys(updateCategory).forEach((item, index) => {
                                if (i == index) {
                                    updateCategory[item] = Number(x.value);
                                    if (i == 0) content.innerText += `${typeSelect[i].category[Number(x.value) - 1]}, `;
                                    if (i == 1) {
                                        let arr = (x.value).toString().split('');
                                        let first = arr.length == 4 ? Number(x.value.toString().slice(0, 1)) - 1 : Number(arr[0]) - 1;
                                        let num = arr[arr.length - 2] == 0 ? Number(arr[arr.length - 1]) - 1 : Number(x.value.toString().slice(-2)) - 1;
                                        content.innerText += `${typeSelect[i].houseType[first][num]}, `;
                                    }
                                    if (i == 2) content.innerText += typeSelect[i].roomCategory[Number(x.value) - 1];
                                }
                            });
                        });
                        CategoryFirstTime = false;
                        PostData(updateCategory, "Category", "Put");
                    }
                    else {
                        content.innerText = input.value;
                        switch (getParentNode(e.target, 2).querySelector('.subtitle').innerText) {
                            case '房源標題':
                                updateTitle.Title = input.value;
                                PostData(updateTitle, "Title", "Put");
                                document.querySelector('.title-div h1').innerText = input.value;
                                break;
                            //每晚價格 & 週租折扣 & 月租折扣 & 甜甜價 & 清潔費 & 押金
                            default :
                                document.querySelectorAll('.updatePrice').forEach((x, i) => {
                                    Object.keys(updatePrice).forEach((item, index) => {
                                        if (index == i) {
                                            updatePrice[item] = parseFloat(x.innerText).toFixed(2);
                                        }
                                    });
                                });
                                PostData(updatePrice, "Price", "Put");
                                break;
                        }
                    }

                    destroyNode(event, 'commonCollapse');
                });

                getParentNode(this, 2).appendChild(component);

            }, false);
        });

        //axios
        function PostData(request,type,method) {
            axios({
                method: method,
                url: `/ManageHouse/@Html.Raw(Model.Id)/${type}`,
                headers: {
                    'Content-Type': 'application/json',
                },
                data: JSON.stringify(request),
            }).then(function (res) {
                console.log(res.data)
            }).catch(function (error) {
                console.log(error);
            });
        }

        //設備與服務
        let updateFacility = {
            ProvideFacilities: [],
            NotProvideFacilities: [],
        };
        let facilityBody = document.getElementById('facilityBody');
        let provide = '@Html.Raw(String.Join(',', Model.ProvideFacilities))'.split(',');
        let notProvide = '@Html.Raw(String.Join(',', Model.NotProvideFacilities))'.split(',');
        document.querySelector('.facilityBtn').addEventListener('click', () => {
            let updateFacilityBtn = document.querySelectorAll('#facilityBody .updateFacility');
            updateFacilityBtn.forEach(item => {
                item.addEventListener('change', (e) => {
                    updateFacility.NotProvideFacilities = [];
                    updateFacility.ProvideFacilities = [];
                    document.querySelectorAll('#facilityBody .btn-group').forEach((x, i) => {
                        let check = x.querySelector('input:checked');
                        if (check == null) return;
                        else if (check.getAttribute('attr') == 'no') updateFacility.NotProvideFacilities.push(Number(check.value));
                        else updateFacility.ProvideFacilities.push(Number(check.value));
                    });
                });
            });
            let content = document.querySelector('.facility .content');
            let saveBtn = document.getElementById('facility-save');
            saveBtn.addEventListener('click', () => {
                PostData(updateFacility, "Facility","Put");
                content.innerText = "";
                facilityBody.querySelectorAll('.yesInput').forEach(x => {
                    if (x.checked) {
                        content.innerText += `${getParentNode(x, 2).querySelector('span').innerText},`;
                    }
                })
            });
        });

        //房間與空間
        let UpdateSpace = {
            Id: "",
            HouseId: '@Html.Raw(Model.Id)',
            SpaceType: 0,
            IsShared: false
        };
        let UpdateBedroom = {
            SpaceId: "",
            BedType: 0,
            BedCount: 0,
            HasIndependentBath: true
        };
        const spaceBed ='@(Model.SpaceBed == null || !Model.SpaceBed.Any() ? string.Empty : Html.Raw(Model.SpaceBed))';
        let SpaceArray = spaceBed ==='' ? null: JSON.parse('@Html.Raw(Model.SpaceBed)');
        let spaceBody = document.getElementById('spaceBody');

        function addBebCheck(x, index, div) {
            space[x].check.forEach(item => {
                let list = document.createElement('div');
                let input = document.createElement('input');
                let label = document.createElement('label');
                list.classList.add('form-check');
                label.innerText = item;
                setAttributes(input, { "class": "form-check-input", "type": "checkbox", "id": `${x}-${index + 1}` });
                setAttributes(label, { "class": "form-check-label", "for": `${x}-${index + 1}` });

                list.appendChild(input);
                list.appendChild(label);
                div.appendChild(list);
            });
        }
        function showSpaceContent() {
            let content = document.querySelector('.space .content');
            let bedroom = 0;
            let bathroom = 0;
            let otherSpace = 0;
            spaceBody.querySelectorAll('.canUse .list').forEach(x => {
                let span = x.querySelector('span').innerText;
                let num = x.lastChild.querySelector('span').innerText;
                if (span == "臥室") bedroom = num;
                else if (span == "全套衛浴") bathroom = Number(num);
                else if (span == "廁所") bathroom += 0.5 * Number(num);
                else otherSpace += Number(num)
            })
            content.innerHTML = `臥室: ${bedroom}<br/>衛浴：${bathroom}<br/>其他區域：${otherSpace}<br/>`;
        }
        function addBedCount(item, div, i) {
            let list = document.createElement('div');
            let span = document.createElement('span');
            let button = document.createElement('div');
            let minus = document.createElement('button');
            let plus = document.createElement('button');
            let num = document.createElement('span');
            list.classList.add('list');
            list.setAttribute('index', i + 1);
            button.classList.add('btn');
            plus.classList.add('plus');
            minus.classList.add('minus');

            minus.addEventListener('click', (e) => {
                let span = e.target.parentNode.querySelector('span');
                span.innerText = Number(span.innerText) - 1;
                if (span.innerText < 0) span.innerText = 0;
                if (getParentNode(e.target, 4).getAttribute('class').includes('collapse')) {
                    UpdateBedroom.SpaceId = getParentNode(e.target, 5).getAttribute('spaceid');
                    UpdateBedroom.BedCount = Number(getParentNode(e.target, 1).querySelector('span').innerText);
                    UpdateBedroom.BedType = Number(getParentNode(e.target, 2).getAttribute('index')) - 1;
                    PostData(UpdateBedroom, "BedroomDetail", "Put");
                    return
                }
                // 減少臥室
                if (i == 0) {
                    let lastBtn = document.querySelector('#spaceBody .bed > div:last-child');
                    UpdateSpace.Id = lastBtn.getAttribute('spaceid');
                    lastBtn.parentNode.removeChild(lastBtn);
                }
                UpdateSpace.SpaceType = Number(getParentNode(e.target, 2).getAttribute('index'));
                PostData(UpdateSpace, "Space", "Delete");
            });
            plus.addEventListener('click', (e) => {
                let span = e.target.parentNode.querySelector('span');
                span.innerText = Number(span.innerText) + 1;
                if (getParentNode(e.target, 4).getAttribute('class').includes('collapse')) {
                    UpdateBedroom.SpaceId = getParentNode(e.target, 5).getAttribute('spaceid');
                    UpdateBedroom.BedCount = Number(getParentNode(e.target, 1).querySelector('span').innerText);
                    UpdateBedroom.BedType = Number(getParentNode(e.target, 2).getAttribute('index')) - 1;
                    if (UpdateBedroom.BedCount == 1) {
                        PostData(UpdateBedroom, "BedroomDetail", "Post");
                    }
                    else {
                        PostData(UpdateBedroom, "BedroomDetail", "Put");
                    }
                    return
                }
                // 增加臥室
                if (i == 0) {
                    let num = e.target.parentNode.querySelector('span').innerText;
                    addRoom(num);
                    UpdateSpace.SpaceType = Number(getParentNode(e.target, 2).getAttribute('index'));
                    UpdateSpace.IsShared = true;
                    axios({
                        method: "Post",
                        url: `/ManageHouse/@Html.Raw(Model.Id)/Space`,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        data: JSON.stringify(UpdateSpace),
                    }).then(function (res) {
                        let room = document.querySelector('#spaceBody .bed > div:last-child');
                        let spaceId = res.data[res.data.length - 1].space.id
                        room.setAttribute('spaceid', spaceId);
                    }).catch(function (error) {
                        console.log(error);
                    });
                    return
                }
                UpdateSpace.SpaceType = Number(getParentNode(e.target, 2).getAttribute('index'));
                UpdateSpace.IsShared = true;
                PostData(UpdateSpace, "Space", "Post");
            });
            span.innerText = item;
            minus.innerText = '-';
            plus.innerText = '+';
            num.innerText = '0';

            button.appendChild(minus);
            button.appendChild(num);
            button.appendChild(plus);
            list.appendChild(span);
            list.appendChild(button);
            div.appendChild(list);
        }
        function addRoom(num) {
            let bed = document.createElement('div');
            let btn = document.createElement('button');
            let collapse = document.createElement('div');
            let card = document.createElement('div');
            btn.innerText = `臥室${num}`;
            addBebCheck("bedroom", num, card);
            space.bedroom.detail.forEach((x,i) => {
                addBedCount(x, card, i+1);
            });

            setAttributes(btn, { "class": "btn btn-dark w-100", "data-bs-toggle": "collapse", "data-bs-target": `#collapseBed-${num}`, "type": "button", "aria-expanded": "false" });
            setAttributes(collapse, { "class": "collapse", "id": `collapseBed-${num}` });
            setAttributes(card, { "class": "card card-body" });

            collapse.appendChild(card)
            bed.appendChild(btn);
            bed.appendChild(collapse);
            document.querySelector('#spaceBody .bed').appendChild(bed);
        }

        //房屋守則
        let updateRule = {
            AllowChild: null,
            AllowBaby: null,
            AllowPet: null,
            AllowSmoke: null,
            AllowParty: null,
        };
        let updateRuleBtn = document.querySelectorAll('#rule .updateAllow');
        updateRuleBtn.forEach(item => {
            item.addEventListener('change', (e) => {
                document.querySelectorAll('#rule .btn-group').forEach((x, i) => {
                    Object.keys(updateRule).forEach((item, index) => {
                        if (i == index) {
                            let check = x.querySelector('input:checked');
                            if (check == null) updateRule[item] = null;
                            else if (check.value == 0) updateRule[item] = false;
                            else updateRule[item] = true;
                        }
                    });
                });
                PostData(updateRule, "Rules", "Put");
            });
        });

        //顯示更多內容
        contentDiv.forEach(content => {
            var observer = new MutationObserver(function (mutations) {
                let mutation = mutations[mutations.length - 1];
                if (mutation.addedNodes.length !== 0) {
                    if (mutation.addedNodes[0].length > 200) {
                        let btn = mutation.target.parentNode.querySelectorAll('button');
                        btn.forEach(x => { x.parentNode.removeChild(x) });

                        mutation.target.classList.add('hide');
                        let button = document.createElement('button').cloneNode(true);
                        button.style.marginTop = "1rem";
                        button.innerText = "顯示更多";
                        button.addEventListener('mousedown', (e) => {
                            if (mutation.target.getAttribute('class').includes('hide')) {
                                mutation.target.classList.remove('hide');
                                e.target.innerText = "隱藏";
                            }
                            else {
                                mutation.target.classList.add('hide');
                                e.target.innerText = "顯示更多";
                            }
                        })
                        mutation.target.parentNode.appendChild(button)
                    }
                    else {
                        let btn = mutation.target.parentNode.querySelector('button');
                        if (btn !== null) btn.parentNode.removeChild(btn);
                    }
                }
            });
            observer.observe(content, { childList: true });
        });

        //window載入時初始化
        window.addEventListener('load', () => {
            //房源類型-初始化
            let categoryContent = document.querySelector('.category .content');
            categoryContent.innerText += `${typeSelect[0].category[Number('@Html.Raw(Model.HouseCategory.Category)') - 1]}, `;
            let arr = '@Html.Raw(Model.HouseCategory.HouseType)'.split('');
            let num = arr[arr.length - 2] == 0 ? Number(arr[arr.length - 1])-1 : Number('@Html.Raw(Model.HouseCategory.HouseType)'.slice(-2))-1;
            let first = arr.length == 4 ? Number('@Html.Raw(Model.HouseCategory.HouseType)'.slice(0, 1))-1 : Number(arr[0])-1;
            categoryContent.innerText += `${typeSelect[1].houseType[first][num]}, `;
            categoryContent.innerText += `${typeSelect[2].roomCategory[Number('@Html.Raw(Model.HouseCategory.RoomCategory)') - 1]}, `;

            //設備與服務-初始化
            Object.keys(facility).forEach((x, index) => {
                let div = document.createElement('div');
                let h3 = document.createElement('h3');
                h3.innerText = x;
                div.appendChild(h3);
                facility[x].forEach((item, i) => {
                    let list = document.createElement('div');
                    let span = document.createElement('span');
                    let group = document.createElement('div');
                    let noInput = document.createElement('input');
                    let yesInput = document.createElement('input');
                    let noLabel = document.createElement('label');
                    let yesLabel = document.createElement('label');
                    span.innerText = item;
                    list.classList.add('modal-list');
                    setAttributes(group, { "class": "btn-group btn-group-justified" });
                    setAttributes(noInput, { "type": "radio", "class": "btn-check updateFacility", "name": `${index + 1}${(i + 1).toString().padStart(2, "0")}`, "id": `no-${index + 1}-${i + 1}`, "autocomplete": "off", "value": `${index + 1}${(i + 1).toString().padStart(2, "0")}`, "attr": "no" });
                    setAttributes(noLabel, { "class": "btn btn-outline-dark editBtn", "for": `no-${index + 1}-${i + 1}` });
                    setAttributes(yesInput, { "type": "radio", "class": "btn-check updateFacility yesInput", "name": `${index + 1}${(i + 1).toString().padStart(2, "0")}`, "id": `yes-${index + 1}-${i + 1}`, "autocomplete": "off", "value": `${index + 1}${(i + 1).toString().padStart(2, "0")}` });
                    setAttributes(yesLabel, { "class": "btn btn-outline-dark editBtn", "for": `yes-${index + 1}-${i + 1}` });
                    noLabel.innerText = "✕";
                    yesLabel.innerText = "✓";

                    provide.forEach(x => {
                        if (x == yesInput.getAttribute('name')) { yesInput.setAttribute('checked', 'checked') }
                    });
                    notProvide.forEach(x => {
                        if (x == noInput.getAttribute('name')) { noInput.setAttribute('checked', 'checked') }
                    });

                    group.appendChild(noInput);
                    group.appendChild(noLabel);
                    group.appendChild(yesInput);
                    group.appendChild(yesLabel);
                    list.appendChild(span);
                    list.appendChild(group);
                    div.appendChild(list);
                });
                facilityBody.appendChild(div);
            });
            let facilityContent = document.querySelector('.facility .content');
            facilityContent.innerText = "";
            facilityBody.querySelectorAll('.yesInput').forEach(x => {
                if (x.checked) {
                    facilityContent.innerText += `${getParentNode(x, 2).querySelector('span').innerText},`;
                }
            })

            //房間與空間-初始化
            Object.keys(space).forEach((x, index) => {
                let div = document.createElement('div');
                let h4 = document.createElement('h4');
                h4.innerText = space[x].title;
                div.appendChild(h4);
                if (index == 0) div.classList.add('canUse');
                else if (index == 1) div.classList.add('bed');

                if (space[x].check !== undefined) {
                    if (index == 2) {
                        addBebCheck(x, index, div)
                    }
                }
                if (space[x].detail !== undefined) {
                    if (index == 0) {
                        space[x].detail.forEach((item, i) => {
                            addBedCount(item, div, i);
                        });
                    }
                }
                spaceBody.appendChild(div);
            });
            if (!SpaceArray) return;
            SpaceArray.forEach(x => {
                let canCreate = true;
                document.querySelectorAll('.canUse .list').forEach((item, itemIndex) => {
                    let span = item.querySelector('.btn span');
                    if (itemIndex + 1 == x.SpaceVM.SpaceType) {
                        if (Number(x.SpaceVM.SpaceType) != 1) span.innerText = Number(span.innerText) + 1
                        else {
                            let allRoom = document.querySelectorAll('.bed > div');
                            allRoom.forEach(y => {
                                if (y.getAttribute('spaceid') == x.SpaceVM.Id) canCreate = false;
                            });
                            if (canCreate) span.innerText = Number(span.innerText) + 1
                        }
                    }
                });
                if (Number(x.SpaceVM.SpaceType) == 1) {
                    if (canCreate) addRoom(Number(document.querySelector('.canUse .list:nth-child(2) .btn span').innerText));
                    let room = document.querySelectorAll('#spaceBody .bed > div');
                    room.forEach(rm => {
                        if (rm.getAttribute('spaceid') == x.SpaceVM.Id || rm.getAttribute('spaceid') == undefined) {
                            rm.setAttribute('spaceid', x.SpaceVM.Id);
                            if (x.SpaceVM.IsShared) rm.querySelector('.form-check:first-child input').checked = true;
                            if (x.BedroomDetailVM !== null) {
                                if (x.BedroomDetailVM.HasIndependentBath) rm.querySelector('.form-check:nth-child(2) input').checked = true;
                                rm.querySelectorAll('.list').forEach((list, listIndex) => {
                                    if (listIndex + 1 == x.BedroomDetailVM.BedType) list.querySelector('.btn span').innerText = x.BedroomDetailVM.BedCount;
                                });
                            }
                        }
                    });
                }
                let yesShare = document.querySelector('#spaceBody > div:last-child .form-check:first-child input');
                let noShare = document.querySelector('#spaceBody > div:last-child .form-check:nth-child(2) input');
                if (x.SpaceVM.IsShared && yesShare != null && noShare != null) yesShare.checked = true;
                else noShare.checked = true;
            });
            showSpaceContent();
            let closeBtn = document.getElementById('space-close');
            closeBtn.addEventListener('click', () => {
                showSpaceContent();
            });

            //顯示更多內容初始化
            contentDiv.forEach(x => {
                if (x.innerText.length > 200) {
                    if (x.getAttribute('id') == 'facilityContent') return;
                    x.classList.add('hide');
                    let button = document.createElement('button').cloneNode(true);
                    button.style.marginTop = "1rem";
                    button.innerText = "顯示更多";
                    button.addEventListener('mousedown', (e) => {
                        if (x.getAttribute('class').includes('hide')) {
                            x.classList.remove('hide');
                            e.target.innerText = "隱藏";
                        }
                        else {
                            x.classList.add('hide');
                            e.target.innerText = "顯示更多";
                        }
                    })
                    x.parentNode.appendChild(button)
                }
            });
        });

        //setAttribute
        function setAttributes(el, attrs) {
            for (let key in attrs) {
                el.setAttribute(key, attrs[key]);
            }
        }

        //取parentNode
        function getParentNode(e, num) {
            let parent = e;
            for (let i = 0; i < num; i++) {
                parent = parent.parentNode;
            }
            return parent
        }

        //銷毀虛擬節點
        function destroyNode(e, id) {
            $(`#${id}`).collapse('hide');
            //e.preventDefault();
            document.querySelector(`#${id}`).addEventListener('hidden.bs.collapse', (e) => {
                e.target.parentNode.removeChild(e.target);
            })
            if (activeContent.parentNode.getAttribute('class').includes('price-mix'))
                activeContent.parentNode.style.opacity = '100';
        }

        //common共用組件
        class CommonComponent extends HTMLElement {
            constructor() {
                super();
                var shadow = this.attachShadow({ mode: 'open' });
                var templateElem = document.getElementById('common-component');
                var content = templateElem.content.cloneNode(true);
                shadow.appendChild(content);
                // 取消
                shadow.querySelectorAll('.cancel').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        destroyNode(e, 'commonCollapse');
                    })
                })
            }
        }
        window.customElements.define('common-component', CommonComponent);

        //房客人數增減
        let updateCustomer = { CustomerNumber: 0 };
        let minus = document.querySelectorAll('.minus');
        let plus = document.querySelectorAll('.plus');
        minus.forEach(x => {
            x.addEventListener('click', (e) => {
                let span = e.target.parentNode.querySelector('span');
                span.innerText = Number(span.innerText) - 1;
                if (span.innerText < 0) span.innerText = 0;
                updateCustomer.CustomerNumber = Number(span.innerText);
                PostData(updateCustomer, "CustomerNumber", "Put");
            });
        });
        plus.forEach(x => {
            x.addEventListener('click', (e) => {
                let span = e.target.parentNode.querySelector('span');
                span.innerText = Number(span.innerText) + 1;
                updateCustomer.CustomerNumber = Number(span.innerText);
                PostData(updateCustomer, "CustomerNumber", "Put");
            });
        });

        //照片拖曳監聽
        let uploadDiv = document.getElementById('uploadDiv');
        uploadDiv.addEventListener("drop", function (e) {
            e.preventDefault();
            let file = e.dataTransfer.files[0];
             UploadImages(file);
        })

        // 拖曳監聽(必須)
        uploadDiv.addEventListener("dragover", function (e) { e.preventDefault(); })

        //初始化圖片
        const photoModel = document.querySelector('#photoModal');
        let photoArray = JSON.parse('@(Html.Raw(Json.Serialize(Model.Pictures)))');
        const showPhoto = document.getElementById('showPhoto');
        const cover = document.querySelector('.showPic');
        if (cover != null) {
            cover.setAttribute('style', `background-image:url(${photoArray[0]});`);
            (function () {
                photoArray.forEach(image => {
                    const div = document.createElement('div');
                    div.classList.add('delete');
                    div.style.backgroundImage = `url(${image})`
                    showPhoto.appendChild(div);
                    div.addEventListener('click', e => deleteImage(e, image));
                    enableDragSort('drag-sort-enable');
                });
            })();
        }

        window.addEventListener('load', () => {
            if (photoArray.length == 0) {
                cover.classList.add('d-none');
            }
        })

        //刪除相片
        function deleteImage(e, photoUrl) {
          e.target.parentNode.removeChild(e.target);
          const fileIndex = photoArray.indexOf(photoUrl);
          if (fileIndex<= -1) return;
          photoArray.splice(fileIndex,1);
        }

        // 照片上傳監聽
        const fileBtn = document.querySelector('#upload_img');
        fileBtn.addEventListener("change", function () {
            //將上傳檔案轉換為base64字串
            if (!this.files||!this.files[0]) return;
            let file = this.files[0];
            UploadImages(file);
        })

        //圖片移動順序
        function enableDragSort(listClass) {
            const sortableLists = document.getElementsByClassName(listClass);
            Array.prototype.map.call(sortableLists, (list) => { enableDragList(list) });
        }
        function enableDragList(list) {
            Array.prototype.map.call(list.children, (item) => { enableDragItem(item) });
        }
        function enableDragItem(item) {
            item.setAttribute('draggable', true)
            item.ondrag = handleDrag;
            item.ondragend = handleDrop;
        }
        function handleDrag(item) {
            const selectedItem = item.target,
                list = selectedItem.parentNode,
                x = event.clientX,
                y = event.clientY;

            selectedItem.classList.add('drag-sort-active');
            let swapItem = document.elementFromPoint(x, y) === null ? selectedItem : document.elementFromPoint(x, y);
            if (list === swapItem.parentNode) {
                swapItem = swapItem !== selectedItem.nextSibling ? swapItem : swapItem.nextSibling;
                list.insertBefore(selectedItem, swapItem);
            }
        }
        function handleDrop(item) {
            item.target.classList.remove('drag-sort-active');
        }

        //相片的modal儲存改變相片及張數
        const photoSave = document.getElementById('photo-save');
        const picNumber = document.querySelector('.up span');
        const savePhotoApiUrl = '/ManageHouse/@Html.Raw(Model.Id)/pictures'
        photoSave.addEventListener('click', () => {
            photoArray = [];
            document.querySelectorAll('.delete').forEach(x => {
                photoArray.push(x.style.backgroundImage.replace('url(', '').replace(')', '').replace(/\"/gi, ""))
            })

            if (photoArray){
                fetch(savePhotoApiUrl, {
                    method:'POST',
                    body: JSON.stringify({
                    Images: photoArray
                    }),
                    headers: {
                        'content-type': 'application/json',
                    },
                })
                .then(response=>response.json())
                .then(json => {
                    console.log(json);
                    photoArray = json.images;
                    console.log(photoArray);
                    console.log((photoArray && photoArray.length));
                    if (photoArray && photoArray.length && cover != null) {
                        cover.classList.remove('d-none');
                        cover.setAttribute('style', `background-image:url(${photoArray[0]})`);
                    }
                    else if (photoArray.length == 0) cover.classList.add('d-none');
                    picNumber.innerText = `${photoArray.length}張照片`
                } )
            }

        });

        //上傳圖片到第三方圖床
        const fileUploadUrl = '@Html.Raw(_photoUploadSetting.Value.BaseUrl)/@Html.Raw(_photoUploadSetting.Value.CloudName)/@Html.Raw(_photoUploadSetting.Value.UploadImageApi)';
        function UploadImages(image){
            const div = document.createElement('div');
            const load = document.importNode(loading.content, true);
            div.append(load);
            div.classList.add('col-6');
            div.classList.add('mb-3');
            showPhoto.appendChild(div);
            const formData = new FormData();
            formData.append("file", image);
            formData.append("upload_preset", "dsojvh87");
           fetch(fileUploadUrl, {
               method: 'POST',
               body: formData
           }).then(res => {
               return res.json();
           }).then(json => {
               const imageUrl = json.secure_url;
               if (!imageUrl) return;
               photoArray.push(imageUrl);
               loadPic(imageUrl,div);
           }).catch(err => console.log(err))
        }

         // 照片進來後的處理
        function loadPic(photoUrl, div) {

            console.log(photoArray);
            div.classList.remove('col-6');
            div.classList.remove('mb-3');
            div.innerHTML='';
            div.classList.add('delete');
            div.style.backgroundImage = `url(${photoUrl})`
            showPhoto.appendChild(div);

            div.addEventListener('click', (e) => deleteImage(e, photoUrl));
             enableDragSort('drag-sort-enable');
        }


        //sideBar
        let collapse = document.querySelectorAll('.sideBtn');
        let li = document.querySelectorAll('.collapse a');
        collapse.forEach(item => {
            item.addEventListener('click', (e) => {
                collapse.forEach(x => { x.classList.remove('active')});
                e.target.classList.add('active');
                e.target.parentNode.querySelector('li:first-child').classList.add('active');
                collapse.forEach(x => { x.parentNode.querySelector('.collapsed').classList.remove('show') });
                li.forEach(x => {x.parentNode.classList.remove('active')});
                document.querySelectorAll('.collapsed li:first-child').forEach(x => {x.classList.add('active');});
            });
        });

        li.forEach(x => {
            x.addEventListener('click', (e) => {
                li.forEach(x => { x.parentNode.classList.remove('active') });
                e.target.parentNode.classList.add('active');
            })
        })

        //滾動時左邊子節點會改變CSS
        let scroll = document.querySelectorAll('.scroll');
        window.addEventListener('scroll', (e) => {
            let sTop = document.documentElement.scrollTop;
            scroll.forEach(x => {
                if (sTop > x.offsetTop - 550) {
                    let h2 = x.querySelector('h2').innerText;
                    li.forEach(x => {
                        if (x.innerText == h2)
                            x.parentNode.classList.add('active');
                    });
                }
                else if (sTop == 0) {
                    li.forEach(x => {
                        x.parentNode.classList.remove('active');
                    });
                    document.querySelectorAll('.collapsed li:first-child').forEach(x => {
                        x.classList.add('active');
                    });
                }
                else {
                    let h2 = x.querySelector('h2').innerText;
                    li.forEach(x => {
                        if (x.innerText == h2)
                            x.parentNode.classList.remove('active');
                    });
                }
            });
        });
    </script>
}

@section ManageCSS{
    <link href="~/css/Manage.css" rel="stylesheet"/>
    <link rel="stylesheet" href="~/css/loading/loading.css">
}